module Rose

class Attribute
  ENUMERATE
    is_class            = 0
    is_aspect           = 1
    is_primitive        = 2
    is_compound         = 3
    type_mask           = 7

    is_direct           = 2
    # AKA by-value type; not a reference type

    is_api              = (1 :<<: 4)
    is_native           = (1 :<<: 5)
    is_macro            = (1 :<<: 6)
    is_initializer      = (1 :<<: 7)
    is_immutable        = (1 :<<: 8)
    is_global           = (1 :<<: 9)
    is_singleton        = (1 :<<: 10)
    is_incorporated     = (1 :<<: 11)
    is_generated        = (1 :<<: 12)
    is_essential        = (1 :<<: 13)
    is_task             = (1 :<<: 14)
    is_task_conversion  = (1 :<<: 15)
    is_augment          = (1 :<<: 16)
    is_abstract         = (1 :<<: 17)
    is_mutating         = (1 :<<: 18)
    is_fallback         = (1 :<<: 19)
    is_special          = (1 :<<: 20)
    is_propagated       = (1 :<<: 21)
    is_dynamic          = (1 :<<: 22)
    returns_this        = (1 :<<: 23)
    is_preferred        = (1 :<<: 24)
    is_nonAPI           = (1 :<<: 25)
    is_deprecated       = (1 :<<: 26)
    is_enum             = (1 :<<: 27)
    is_thread_local     = (1 :<<: 28)
    is_synchronized     = (1 :<<: 29)
    is_synchronizable   = (1 :<<: 30)
endClass


class Attributes
  PROPERTIES
    flags : Int32
    tags  : String[]

  METHODS
    method init

    method init( flags )

    method cloned->Attributes
      local result = Attributes( flags )
      if (tags)
        forEach (tag in tags)
          result.add( tag )
        endForEach
      endIf
      return result

    method add( flag:Int32 )->Attributes
      flags |= flag
      return this

    method add( tag:String )->Attributes
      if (tags is null) tags = String[]
      tags.add( tag )
      return this

    method add( other:Attributes )->Attributes
      flags |= other.flags
      if (other.tags)
        forEach (tag in other.tags) add( tag )
      endIf
      return this

    method element_type_name->String
      which (flags & Attribute.type_mask)
        case Attribute.is_primitive: return "primitive"
        case Attribute.is_aspect:    return "aspect"
        case Attribute.is_compound:  return "compound"
        others:                      return "class"
      endWhich

endClass
