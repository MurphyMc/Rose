module Rose

class ReturnException : Exception
  PROPERTIES
    return_value = UndefinedValue : Value
  METHODS
    method init (return_value)
      noAction
endClass


class Method : RoseObject
  PROPERTIES
    t            : Token
    type_context : RoseObject
    #name         : String
    signature    : String

    attributes   = Attributes()

#    return_type      : Type

#    task_result_type : Type
      # When a [task] is organized, task_result_type gets set to the original return_type
      # and return_type gets set to Task or TaskWithResult<<ResultType>>

    parameters = Local[] : Local[]
#    locals     = Local[] : Local[]

    min_args     : Int32

    statements            = CmdStatementList()

  METHODS
    method init( t, type_context, name:String )
      _name = name

    method cloned->Method
      local result = Method( t, type_context, name )

      <initialize_result>
      #result.signature = signature
      #result.attributes = attributes.cloned

      #result.locals = Local[]
      #forEach (v in locals) result.locals.add( v.cloned )
      result.parameters = Local[]
#      forEach (i of parameters) result.parameters.add( locals[i] )

      result.min_args = min_args
      result.statements = statements.cloned( CloneMethodArgs(result) )

      return result

    method accepts_arg_count( n:Int32 )->Logical
      return n >= min_args and n <= parameters.count

    method add_local( v_t:Token, v_name:String, v_initial_value=null:Cmd )->Local
      local v = Local( v_t, v_name )
      #v.index = locals.count
      v.initial_value = v_initial_value
      #locals.add( v )
      return v

    method add_local( v:Local )->Local
      #v.index = locals.count
      #locals.add( v )
      return v

    method add_parameter( p_t:Token, p_name:String )->Local
      #local p = add_local( p_t, p_name )
      local p = Local(p_t, p_name)
      parameters.add( p )
      return p

    #method is_initializer->Logical
    #  return (attributes.flags & Attribute.is_initializer)

    method is_global->Logical
      return (attributes.flags & Attribute.is_global)

    #method is_task->Logical
    #  return (attributes.flags & Attribute.is_task)

    #method is_task_conversion->Logical
    #  return (attributes.flags & Attribute.is_task_conversion)

    #method is_synchronized->Logical
    #  return (attributes.flags & Attribute.is_synchronized)

    method set_type_context( @type_context )->Method
      return this

    method to->String
      if (type_context) return "$.$" (type_context.name,select{signature||name})
      return "." + select{signature||name}

    method call (scope:RoseObject, args:Value[], new_scope=true:Logical)->Value
      local call_scope = scope
      if (new_scope)
        call_scope = MethodFrame()
        call_scope._name = name
        call_scope.next = scope.globals
      endIf

      #FIXME: Handle named args!

      if (args.count > parameters.count)
        throw RoseError("Method $ was passed $ args, but it takes at most $." (this, args.count, parameters.count))
      elseIf (args.count < min_args)
        throw RoseError("Method $ was passed $ args, but it takes at least $." (this, args.count, min_args))
      elseIf (args.count < parameters.count)
        forEach (i in args.count..<parameters.count)
          if (parameters[i].initial_value)
            args.add(parameters[i].initial_value.eval(scope))
          else
            throw RoseError("Method $ was not passed a value for parameter $." (this, parameters[i].name))
          endIf
        endForEach
      endIf

      forEach (p at i in parameters)
        call_scope.set(p.name, args[i], &force)
      endForEach

      try
        forEach (st in statements)
          #println "<<<< " + this + "() " + st
          #println ">>>> " + this + "() " + st.eval(call_scope)
          st.eval(call_scope)
        endForEach
      catch (ex:ReturnException)
        return ex.return_value
      endTry
      return UndefinedValue
endClass


class MethodFrame : RoseObject
  METHODS
    method get(n:String,t=null:Token,local_only=false:Logical)->Object
      # On failure to find locally, does a lookup in parent even if local_only
      local r = vars[n]
      if (r is null)
        r = next.get(n, t, &local_only)
        if (r is null and next and not local_only) return next.get(n, t)
      endIf
      return r
endClass


class BoundMethod : RoseObject
  PROPERTIES
    bound_method : Method
    bound_this : RoseObject
  METHODS
    method init( bound_method, bound_this, name:String )
      _name = name

    method call (scope:RoseObject, args:Value[], new_scope=true:Logical)->Value
      #TODO: What we need here is a special
      local this_scope = MethodFrame()
      this_scope.next = bound_this
      this_scope._name = "BoundMethodScope:"+bound_method.name
      this_scope.set("this", bound_this, &force)

      return bound_method.call(this_scope, args, &!new_scope)
endClass


class NativeMethod : RoseObject
  PROPERTIES
    bound_method : Function(RoseObject,Value[])->(Value)
    bound_this : RoseObject
  METHODS
    method init( bound_method, name:String, bound_this=null )
      _name = name

    method call (scope:RoseObject, args:Value[], new_scope=true:Logical)->Value
      return bound_method(bound_this, args)
endClass
