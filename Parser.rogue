module Rose


class Rose
  PROPERTIES
    globals : RoseObject
  METHODS
    method init ()
      globals = RoseObject("Global")
      globals.set("Global", globals)

    method execute(filename:String)
      local parser = Parser(filename)
      parser.program = globals

      local statements = CmdStatementList()
      parser.cur_statement_list = statements
      parser.parse_elements
      statements.evaled(parser.program)#, &debug)
endClass



#{
class Preprocessor
  METHODS
    method init (o:Object)
      noAction
    method process (t:Token[])->Token[]
      return t
    method reprocess (t:Token[])->Token[]
      return t
endClass
}#


class Parser
  PROPERTIES
    reader      : TokenReader
    filepath    : String
    this_type   : RoseObject
    this_method : Method
    program : RoseObject
    local_declarations = Local[]  # repeated temporary use
#    property_list = Property[]    # temp use

    string_buffer = StringBuilder()

    cur_statement_list : CmdStatementList

    used_modules    = String[]
    module_id_map   : StringTable<<String>>

    inserted_module_prefixes : Logical

    #implicit_access_used : Logical
    implicit_loop_stack  = CmdControlStructure[]

  METHODS
    method init( filepath )
      init( Preprocessor(this).process(Tokenizer().tokenize(filepath)), &skip_reprocess )

    method init( filepath, content:String )
      init( Preprocessor(this).process(Tokenizer().tokenize(filepath,content)), &skip_reprocess )

    method init( t:Token, filepath, data:String, column_delta=0:Int32 )
      init( Preprocessor(this).process(Tokenizer().tokenize(t,filepath,data,column_delta)), &skip_reprocess )

    method init( tokens:Token[], &skip_reprocess )
      if (not skip_reprocess) tokens = Preprocessor( this ).reprocess( tokens )
      reader = TokenReader( tokens )

    method consume( type:TokenType )->Logical
      if (not reader.next_is(type)) return false
      reader.read
      return true

    method consume( identifier:String )->Logical
      local t = reader.peek
      if (t.type is not TokenType.identifier) return false
      if (t->String != identifier) return false
      read
      return true

    method consume_end_commands->Logical
      local found = false
      while (consume(TokenType.eol) or consume(TokenType.symbol_semicolon)) found = true
      return found

    method consume_eols->Logical
      local found_any = false
      while (consume(TokenType.eol)) found_any = true
      return found_any

    method error( message:String )->RoseError
      throw reader.peek.error( message )

#{
    method insert_module_prefixes
      if (inserted_module_prefixes) return
      inserted_module_prefixes = true

      while (reader.has_another)

        local t = reader.read
        if (t.type is TokenType.identifier)
          local name = t->String
          if (name[0] == ':')
            # ::Name -> Name
            reader.tokens[ reader.position - 1 ] = t.type.create_token( t, name.from(2) )
          elseIf (module_id_map)
            local mapping = module_id_map[ name ]
            if (mapping)
              reader.tokens[ reader.position - 1 ] = t.type.create_token( t, mapping )
            endIf
          endIf

        elseIf (t.type is TokenType.directive_module)
          add_used_module( read_identifier )

        elseIf (t.type is TokenType.directive_using)
          add_used_module( read_identifier )

        endIf

      endWhile
      reader.position = 0  # rewind
}#

    method must_consume( type:TokenType, error_message=null:String )
      if (consume(type)) return
      local t = peek
      if (not error_message)
        error_message = "$ expected, found $." (type.quoted_name,t.quoted_name)
      endIf
      throw t.error( error_message )

    method must_consume_eols
      must_consume( TokenType.eol )
      consume_eols

    method must_read( type:TokenType )->Token
      local t = reader.peek
      if (t.type is not type) must_consume(type)
      return reader.read

    method next_is( type:TokenType )->Logical
      return reader.next_is( type )

    method next_is_end_command->Logical
      if (not reader.has_another) return false
      local type = reader.peek.type
      return type.is_end_command

    method next_is_identifier( name=null:String )->Logical
      local t = peek
      if (t.type != TokenType.identifier) return false
      if (not name) return true
      return (t->String == name)

    method next_is_statement->Logical
      if (not reader.has_another) return false
      return reader.next_is_statement_token

    method parse_elements
#      insert_module_prefixes  # no effect if called twice

      while (parse_element) noAction

      if (reader.has_another)
        local t = peek
        throw t.error( "Syntax error: unexpected $." (t.quoted_name) )
      endIf

    method parse_element->Logical
      consume_eols
      if (not reader.has_another) return false

#      if (parse_native_element) return true

      local t = peek
#if false
#  noAction

      if (t.type is TokenType.keyword_class)
        parse_class_template
        return true

      elseIf (t.type is TokenType.keyword_routine)
        parse_routine
        return true

#{
      elseIf (t.type is TokenType.keyword_enum)
        parse_enum
        return true
}#

#{
      elseIf (t.type is TokenType.directive_module)
        # We've already processed this in insert_module_prefixes(), skip it here
        read
        read_identifier
        must_consume_eols
        return true

      elseIf (t.type is TokenType.directive_using)
        # We've already processed this in insert_module_prefixes(), skip it here
        read
        read_identifier
        must_consume_eols
        return true
}#
      elseIf (next_is_statement)
        #this_type = Program.get_type_reference( peek, "Global" )
        #this_method = Program.get_on_launch_method( t )
        #parse_multi_line_statements( this_method.statements )

        parse_multi_line_statements(cur_statement_list)
        return true
#{
      elseIf (next_is(TokenType.keyword_global))
        this_type = Program.get_type_reference( peek, "Global" )
        this_method = Program.get_on_launch_method( t )
        local prev_statement_list = cur_statement_list
        cur_statement_list = this_method.statements
        parse_local_or_global
        cur_statement_list = prev_statement_list
        return true
}#
      endIf

      return false

    method parse_class_template
      local t = read  # 'class'
      local name = read_identifier
      #local template = Template( t, name, Attribute.is_class )
      #parse_template_tokens( template, TokenType.keyword_endClass )
      local cls = RoseObject()
      cls.set("call", NativeMethod(cls=>create_instance, name, cls), &force)
      cls.next = program
      parse_type_def(cls)

      # This doesn't currently allow for nested classes...
      program.geto( "Global" ).set( name, Value(cls), &force )

    method parse_routine
      local t = peek # 'routine'
      local original_type = this_type
      this_type = program.geto( "Global", peek )
      parse_method( true, &first_token=TokenType.keyword_routine)
      must_consume( TokenType.keyword_endRoutine )
      if (not this_method)
        throw t.error("Failed to parse routine")
      endIf
      this_type = original_type

#{
    method parse_template_tokens( template:Template, end_type:TokenType )
      if (consume(TokenType.symbol_open_specialize))
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          local t = must_read( TokenType.placeholder_id )
          template.add_type_parameter( t, t->String )
        endWhile
        must_consume( TokenType.symbol_close_specialize )
      endIf

      # Skip past any args and base types to get to the [attributes]
      #   (autoinit) : BaseType, ... [attributes] \n
      #   ^^^^^^^^^^^^^^ leave       ^parse       ^leave
      local starting_pos = reader.position
#      allow_placeholder_ids = true

      if (consume(TokenType.symbol_open_paren))
        # ( name1[=value1][:Type1] [, ...] )
        consume_eols
        if (not consume(TokenType.symbol_close_paren))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols
            consume( TokenType.symbol_ampersand )
            read_identifier
            consume_eols
            if (consume(TokenType.symbol_equals)) parse_expression
            consume_eols
            if (consume(TokenType.symbol_colon))
              if (not consume(TokenType.placeholder_id)) parse_type_name
            endIf
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      if (consume(TokenType.symbol_colon))
        parse_type_name
        while (consume(TokenType.symbol_comma)) parse_type_name
      endIf

      local final_pos = reader.position
#      allow_placeholder_ids = false

      reader.position = starting_pos
      while (reader.position < final_pos) template.tokens.add( read )

      # Parse out attributes
      parse_attributes( template.attributes )

      local semi_t = peek
      if (consume(TokenType.symbol_semicolon))
        if (template.tokens.count == 0) template.tokens.add( TokenType.eol.create_token(semi_t) )
#        Program.add_template( template )
        return
      endIf

      while (reader.has_another)
        local t = reader.read
        if (t.type is end_type)
          # Must wait to add_template() until finished collecting tokens because overloaded routines
          # just append their tokens to the template generated from the original routines.
#          Program.add_template( template )
          return
        endIf
        template.tokens.add( t )
      endWhile

      throw reader.error( "$ expected, found end of file." (end_type.quoted_name) )
}#

#{
    method parse_enum
      local t = read  # 'enum'
      local name = read_identifier
      local template = Template( t, name, Attribute.is_compound | Attribute.is_enum )

      parse_attributes( template.attributes )

      t = peek
      if (consume(TokenType.symbol_semicolon))
        if (template.tokens.count == 0) template.tokens.add( TokenType.eol.create_token(t) )
        Program.add_template( template )
        return
      endIf

      template.tokens.add( TokenType.keyword_CATEGORIES.create_token(peek) )

      while (reader.has_another)
        t = reader.read
        if (t.type is TokenType.keyword_endEnum)
          Program.add_template( template )
          return
        endIf
        template.tokens.add( t )
      endWhile

      throw reader.error( "'endEnum' expected, found end of file." )

      #{
      # Assign values and shift categories to definitions
      local cur_index = 0
      local cur_expression : Cmd
      forEach (def in this_type.categories)

      this_type.add_global( t, "names" ).type = Program.get_type_reference( t, "String[]" )
      this_type.add_property( t, "value", Program.type_Int32 )

      # contains(String)
      local m_contains = this_type.add_global_method( t, "contains" )
      m_contains.return_type = Program.type_Logical
      m_contains.add_parameter( t, "name", Program.type_String )
      m_contains.statements.add( CmdReturn( t,
        CmdAccess( t, CmdAccess(t,"names","locate",CmdAccess(t,"name")), "exists" ) ) )



      local names = String[]
        local cur_index = 0
        consume_eols
        while (next_is(TokenType.identifier))
          local t2 = peek

          local name = read_identifier
          names.add( name )

          local args = CmdArgs( CmdLiteralInt32(t,cur_index) )
          ++cur_index

          local def = Definition( t2, name, CmdAccess(t2,this_type.name,args) )
          this_type.definition_lookup[ name ] = def
          this_type.definition_list.add( def )

          must_consume_eols
        endWhile


        if (reader.has_another)
          if (next_is(TokenType.keyword_global))
            throw peek.error( "Global variables must be declared in global scope outside of any class or routine definitions." )
          endIf
        endIf
      endIf

      local m_to_Int32 = this_type.add_method( t, "to_Int32" )
      m_to_Int32.attributes.add( Attribute.is_generated )
      m_to_Int32.return_type = Program.type_Int32
      m_to_Int32.statements.add( CmdReturn(t, CmdAccess(t,"value")) )

      local m_to_String = this_type.add_method( t, "to_String" )
      m_to_String.attributes.add( Attribute.is_generated )
      m_to_String.return_type = Program.type_String
      local cmd_oob = CmdLogicalOr( t,
          CmdCompareLT(t,CmdAccess(t,"value"),CmdLiteralInt32(t,0)),
          CmdCompareGE(t,CmdAccess(t,"value"),CmdAccess(t,"names","count"))
        )
      local cmd_if_oob = CmdIf( t, cmd_oob )
      cmd_if_oob.statements.add( CmdReturn(t, CmdLiteralString(t,"(undefined)") ) )
      m_to_String.statements.add( cmd_if_oob )
      m_to_String.statements.add( CmdReturn(t,CmdAccess(t,"names","get",CmdAccess(t,"value"))) )

      local m_names = this_type.add_global_method( t, "names" )
      m_names.attributes.add( Attribute.is_generated )
      m_names.return_type = Program.get_type_reference( t, "String[]" )
      local names_list_args = CmdArgs()
      forEach (name in names)
        local name_t = this_type.definition_lookup[name].t
        names_list_args.add( CmdLiteralString(name_t,name) )
      endForEach
      local cmd_if = CmdIf( t, CmdLogicalNot(t,CmdAccess(t,"@names")) )
      cmd_if.statements.add( CmdAssign(t, CmdAccess(t,"names"), CmdCreateList(t,names_list_args)) )
      m_names.statements.add( cmd_if )
      m_names.statements.add( CmdReturn(t,CmdAccess(t,"@names")) )
      }#
}#

    method parse_attributes( attributes=null:Attributes )->Attributes
      if (not consume(TokenType.symbol_open_bracket)) return attributes
      if (attributes is null) attributes = Attributes()

      while (reader.has_another and not next_is(TokenType.symbol_close_bracket))
        local t = peek
        if (consume(TokenType.keyword_native))
          attributes.add( Attribute.is_native )
        elseIf (consume(TokenType.keyword_deprecated))
          attributes.add( Attribute.is_deprecated )

        elseIf (consume("abstract"))
          attributes.add( Attribute.is_abstract )
        elseIf (consume("aspect"))
#          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_aspect )
        elseIf (consume("compound"))
#          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_compound )
        elseIf (consume("fallback"))
          attributes.add( Attribute.is_fallback )
        elseIf (consume("immutable"))
          attributes.add( Attribute.is_immutable )
        elseIf (consume("macro"))
          attributes.add( Attribute.is_macro )
          attributes.add( Attribute.is_propagated )
        elseIf (consume("mutating"))
          attributes.add( Attribute.is_mutating )
        elseIf (consume("nonAPI"))
          attributes.add( Attribute.is_nonAPI )
        elseIf (consume("preferred"))
          attributes.add( Attribute.is_preferred )
        elseIf (consume("primitive"))
#          ensure_unspecialized_element_type( t, attributes )
          attributes.add( Attribute.is_primitive )
        elseIf (consume("propagated"))
          attributes.add( Attribute.is_propagated )
        elseIf (consume("essential"))
          attributes.add( Attribute.is_essential )
        elseIf (consume("singleton"))
          attributes.add( Attribute.is_singleton )
        elseIf (consume("special"))
          attributes.add( Attribute.is_special )
        elseIf (consume("task"))
          attributes.add( Attribute.is_task )
        elseIf (consume("api"))
          attributes.add( Attribute.is_api )
        elseIf (consume("synchronized"))
          attributes.add( Attribute.is_synchronized )
        elseIf (consume("threadLocal"))
          attributes.add( Attribute.is_thread_local )
        elseIf (next_is(TokenType.identifier))
          attributes.add( read->String )
        else
          throw peek.error( "Invalid attribute: " + peek )
        endIf
      endWhile

      must_consume( TokenType.symbol_close_bracket )

      return attributes

    method parse_type_def( this_type )
      local t = peek

#{
      local compound_has_create = false
      if (consume(TokenType.symbol_open_paren))
        # ( auto_property[=value][:Type, ... )
        consume_eols
        if (not consume(TokenType.symbol_close_paren))
          local m : Method
          if (this_type.is_compound)
            compound_has_create = true
            m = this_type.add_global_method( t, "create" )
            m.attributes.add( Attribute.is_generated )
          else
            m = this_type.add_method( t, "init" )
          endIf
          m.return_type = this_type
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols

            # [&]name[=default_value][:Type]
            t = peek
            local is_flag = consume( TokenType.symbol_ampersand )
            local p_name = read_identifier
            local param = m.add_parameter( t, p_name )
            consume_eols
            if (consume(TokenType.symbol_equals)) param.initial_value = parse_expression
            consume_eols

            local p_type : Type
            if (consume(TokenType.symbol_colon))
              consume_eols
              p_type = parse_type

              if (this_type.is_compound)
                param.type = p_type
              endIf

              this_type.add_property( t, p_name, p_type )

            elseIf (is_flag)
              p_type = Program.type_Logical
              if (this_type.is_compound) param.type = p_type
              this_type.add_property( t, p_name, p_type )
            endIf

            if (is_flag and not param.initial_value)
              if (p_type is Program.type_Logical)
                param.initial_value = CmdLiteralLogical( t, false )
              else
                param.initial_value = CmdLiteralInt32( t, 0 )
              endIf
            endIf

            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      if (this_type.is_compound)
        this_type.base_types.add( Program.get_type_reference(t,"CompoundIntrospection<<$>>"(this_type.name)) )
        if (not compound_has_create)
          local m = this_type.add_global_method( t, "create" )
          m.attributes.add( Attribute.is_generated )
          m.return_type = this_type
        endIf
      endIf
}#

      if (consume(TokenType.symbol_colon))
        # : BaseType1, BaseType2, ...
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          consume_eols
          if (not this_type.has_own_property("__bases__"))
            this_type.set("__bases__", @[], &force)
          endIf
          this_type.getv("__bases__").add( parse_type )
          consume_eols
        endWhile
      endIf

      while (parse_section) noAction
      consume_eols

      if (reader.has_another)
        if (next_is(TokenType.keyword_global))
          throw peek.error( "Global variables must be declared in global scope outside of any class or routine definitions." )
        #else
        #  throw peek.error( "Syntax error: unexpected $." (peek.quoted_name) )
        endIf
      endIf

      must_consume( TokenType.keyword_endClass )

    method parse_section->Logical
      consume_eols

#{
      local message = parse_deprecated
      if (message)
        this_type.attributes.add( Attribute.is_deprecated )
        this_type.attributes.add( Attribute.is_nonAPI )
        this_type.deprecated_message = message
        return true
      endIf
}#

#{
      if (consume(TokenType.keyword_DEPENDENCIES))
        while (parse_dependency) noAction
        return true
      endIf

      if (consume(TokenType.begin_augment_tokens))
        parsing_augment = true
        consume_eols
      endIf

      if (consume(TokenType.keyword_ENUMERATE))
        while (parse_definitions(true)) noAction
        return true
      endIf

      if (consume(TokenType.keyword_DEFINITIONS))
        while (parse_definitions(false)) noAction
        return true
      endIf

      if (consume(TokenType.keyword_GLOBAL))
        if (consume(TokenType.keyword_PROPERTIES))
          local attributes = parse_attributes
          while (parse_properties(true, &default_attributes=attributes)) noAction
          return true
        elseIf (consume(TokenType.keyword_METHODS))
          local attributes = parse_attributes
          while (parse_method(true, &default_attributes=attributes)) noAction
          return true
        endIf
      endIf
}#

      if (consume(TokenType.keyword_PROPERTIES))
        local attributes = parse_attributes
        while (parse_properties(&default_attributes=attributes)) noAction
        return true
      endIf

      if (consume(TokenType.keyword_METHODS))
        local attributes = parse_attributes
        while (parse_method(&default_attributes=attributes)) noAction
        return true
      endIf

      return false

    method parse_properties( as_global=false:Logical, default_attributes=null:Attributes )->Logical
      consume_eols

#{
      if (consume(TokenType.keyword_native))
        # Example: native "FILE* fp;"
        if (not next_is(TokenType.literal_string))
          throw peek.error( "Literal string expected." )
        endIf

        local native_t = read
        local p = this_type.add_property( native_t, native_t->String, Program.type_Int64 )
        p.mark_native
        if (default_attributes) p.attributes |= default_attributes.flags

        must_consume_eols
        return true
      endIf
}#

      if (not next_is(TokenType.identifier)) return false

#      property_list.clear

      # Stores current property declarations so that we can come back and
      # and assign a type to them.

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols
        local t = peek
        local name = read_identifier
        #{
        local p : Property
        if (as_global) p = this_type.add_global( t, name )
        else           p = this_type.add_property( t, name )
        property_list.add( p )

        # Allow per-property attributes
        if (next_is(TokenType.symbol_open_bracket))
          local attributes = Attributes()
          parse_attributes( attributes )
          p.attributes |= attributes.flags
        endIf
        # Default (section) attributes
        if (default_attributes) p.attributes |= default_attributes.flags

        if (consume(TokenType.symbol_equals))
          p.initial_value = parse_expression
        endIf
        }#

        # This is sort of a hack in that it doesn't allow for proper resolution of properties in
        # nested classes.  Of course, there are other things which don't allow for nested classes
        # either, so that's okay at least for now...
        local v = UndefinedValue
        if (consume(TokenType.symbol_equals))
          v = parse_expression.eval(program)
        endIf
        this_type.set(name,v,&force)
      endWhile

      consume_eols
#{
      if (consume(TokenType.symbol_colon))
        local p_type = parse_type
        forEach (p in property_list)
          p.type = p_type
        endForEach
      else
        forEach (p in property_list)
          local name = "property"
          if (as_global) name = "global property"
          if (p.initial_value)
            p.type = p.initial_value.implicit_type( Scope(this_type,null) )
            if (p.type is null)
              #println p.initial_value.type_name
              throw p.initial_value.t.error(
                ''Cannot determine $ type from initial value; append an explicit type declaration such as ": Int32" '' (name) )
            endIf
          else
            throw p.t.error( ''An initial value or $ type (for example, ": Int32") must be specified.'' (name) )
          endIf
        endForEach
      endIf
}#
      return true

    method parse_method( as_global=false:Logical, default_attributes=null:Attributes, &skip_add_to_type, first_token=TokenType.keyword_method:TokenType )->Logical
      consume_eols

      if (not next_is(first_token)) return false

      if (parse_method_header(as_global, default_attributes) is null) return true

#      parse_attributes( this_method.attributes )
#      if (parsing_augment) this_method.attributes.add( Attribute.is_augment )

      if (not skip_add_to_type)
        if (as_global) this_type.add_global_method( this_method )
        else           this_type.add_method( this_method )
      endIf

      consume( TokenType.symbol_colon )

      consume_eols

      parse_multi_line_statements( this_method.statements )

      return true

    method parse_method_header( as_global=false:Logical, default_attributes=null:Attributes )->Method
      local t = read  # 'routine' or 'method'
      local name = read_identifier

#{
      which (name)
        case "operator"
          name += reader.read->String
        case "to"
          if (consume(TokenType.symbol_arrow))
            name = "to_" + parse_type_name
          endIf
        others
      endWhich
}#

      this_method = Method( t, this_type, name )
      if (default_attributes) this_method.attributes.add(default_attributes)
      if (as_global)
        this_method.attributes.add( Attribute.is_global )
      endIf

      # Parse parameters
      if (consume(TokenType.symbol_open_paren))
        if (not consume(TokenType.symbol_close_paren))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols

            local is_flag = consume( TokenType.symbol_ampersand )

            # identifier
            t = peek
            local param = this_method.add_parameter( t, read_identifier(true) )

            if (consume(TokenType.symbol_equals))
              # = default_value
              param.initial_value = parse_expression
            endIf

            if (is_flag)
              if (not param.initial_value) param.initial_value = CmdLiteral(t,UndefinedValue)
            endIf
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      return this_method


    method parse_single_or_multi_line_statements( statements:CmdStatementList, end_type:TokenType )
      if (consume_eols)
        # multi-line while
        parse_multi_line_statements( statements )
        must_consume( end_type )
      else
        # single-line while
        parse_single_line_statements( statements )
        consume_eols
      endIf

    method parse_multi_line_statements( statements:CmdStatementList )
      consume_end_commands
      while (next_is_statement)
        parse_statement( statements, true )

        while (consume(TokenType.eol) or consume(TokenType.symbol_semicolon)) noAction
        consume_end_commands
      endWhile

    method parse_single_line_statements( statements:CmdStatementList )
      while (next_is_statement)
        parse_statement( statements, false )
        if (not consume(TokenType.symbol_semicolon)) return
        while (consume(TokenType.symbol_semicolon)) noAction

        # Don't let a trailing ';' act as a next-line continuation.
        if (next_is_end_command) escapeWhile
      endWhile

      if (not consume(TokenType.eol))
        if (not peek.is_structure)
          must_consume( TokenType.eol )  # force an error
        endIf
      endIf

    method parse_statement( statements:CmdStatementList, allow_control_structures:Logical )
      local prev_statement_list = cur_statement_list
      cur_statement_list = statements

      local original_statement_count = statements.count
      local original_implicit_loop_count = implicit_loop_stack.count

      parse_statement( allow_control_structures )

      while (implicit_loop_stack.count > original_implicit_loop_count)
        forEach (original_statement_count..<statements.count)
          implicit_loop_stack.last.statements.add( statements.remove_at(original_statement_count) )
        endForEach
        statements.add( implicit_loop_stack.remove_last )
      endWhile

      cur_statement_list = prev_statement_list

    method parse_statement( allow_control_structures:Logical )
#{
      local deprecated_message = parse_deprecated
      if (deprecated_message)
        this_method.attributes.add( Attribute.is_deprecated )
        this_method.attributes.add( Attribute.is_nonAPI )
        this_method.deprecated_message = deprecated_message
        return
      endIf
}#
      local t = peek

      if (allow_control_structures)
        if (next_is(TokenType.keyword_if))
          cur_statement_list.add( parse_if )
          return

#{
        elseIf (next_is(TokenType.keyword_which))
          cur_statement_list.add( parse_which )
          return

        elseIf (next_is(TokenType.keyword_forEach))
          cur_statement_list.add( parse_for_each )
          return
}#
        elseIf (next_is(TokenType.keyword_block))
          cur_statement_list.add( parse_block )
          return
#{
        elseIf (consume(TokenType.keyword_compileError))
          if (next_is(TokenType.literal_string))
            throw t.error( read->String )
          else
            throw t.error( "Missing API implementation for current compile target." )
          endIf

        elseIf (next_is(TokenType.keyword_contingent))
          cur_statement_list.add( parse_contingent )
          return
}#
        elseIf (next_is(TokenType.keyword_while))
          cur_statement_list.add( parse_while )
          return

        elseIf (next_is(TokenType.keyword_loop))
          cur_statement_list.add( parse_loop )
          return

        elseIf (next_is(TokenType.keyword_try))
          cur_statement_list.add( parse_try_statement )
          return

#{
        elseIf (next_is(TokenType.keyword_use))
          cur_statement_list.add( parse_use_statement )
          return
}#
        elseIf (next_is(TokenType.keyword_local))
          parse_local_or_global( &is_local )
          return

        endIf
      endIf

      if (consume(TokenType.keyword_return))
        if (next_is_end_command)
          cur_statement_list.add( CmdReturn(t) )
        else
          #if (not this_method.return_type)
          #throw peek.error( "$()() is not declared as returning a value." (this_method.name) )
          #endIf
          cur_statement_list.add( CmdReturn(t,parse_expression) )
        endIf
        return
#{
      elseIf (consume(TokenType.keyword_await))
        # Insert a local result declaration and a statement list to hold the
        # await cmd and subsequent conversion.  Substitute the result var in
        # place of this statement.
        #
        #   await some_task(a,b)
        #
        # ->
        #
        #   {
        #     task = some_task(a,b)
        #     while (task.update) yield
        #   }
        #
        local statement_list = CmdStatementList()
        cur_statement_list.add( CmdAwait(t,parse_expression,statement_list) )
        return

      elseIf (consume(TokenType.keyword_yield))
        local result : Cmd
        if (not next_is_end_command)
          result = parse_expression
        endIf

        cur_statement_list.add( CmdYield(t,result) )
        return

      elseIf (consume(TokenType.keyword_throw))
        cur_statement_list.add( CmdThrow(t,parse_expression) )
        return
}#
      elseIf (consume(TokenType.keyword_noAction))
        noAction
        return
#{
      elseIf (consume(TokenType.keyword_assert))
        consume_eols
        local has_parens = consume( TokenType.symbol_open_paren )

        local start_t = peek
        local expr = parse_expression
        local message : Cmd
        if (consume(TokenType.symbol_double_vertical_bar)) message = parse_expression
        local end_t = peek

        if (has_parens) must_consume( TokenType.symbol_close_paren )

        if (not RogueC.debug_mode) return

        if (not message)
          local buffer = StringBuilder()
          local parse_reader = RogueC.scanners_by_filepath[ start_t.filepath ]
          if (parse_reader and start_t.line and start_t.column and start_t.filepath == end_t.filepath)
            parse_reader.seek_location( start_t.line, start_t.column )
            while (parse_reader.has_another and (parse_reader.line < end_t.line or ...
                   (parse_reader.line == end_t.line and parse_reader.column < end_t.column)))
              buffer.print( parse_reader.read )
            endWhile
          endIf
          message = CmdLiteralString( t, buffer->String )
        endIf

        local temp_var = this_method.add_local( t, Program.create_unique_id )
        temp_var.type = Program.type_Int32  # temporary placeholder until CmdAssert resolves
        cur_statement_list.add( CmdLocalDeclaration(t,temp_var,&skip_initialization) )
        cur_statement_list.add( CmdAssert(t, expr, message, temp_var) )
        return

      elseIf (next_is(TokenType.keyword_ensure))
        cur_statement_list.add( parse_ensure_statement )
        return
}#
      endIf

      if (consume(TokenType.keyword_escapeWhile))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_while) )
        return

      elseIf (consume(TokenType.keyword_escapeForEach))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_forEach) )
        return

      elseIf (consume(TokenType.keyword_escapeBlock))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_block) )
        return

      elseIf (consume(TokenType.keyword_escapeContingent))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_contingent) )
        return

      elseIf (consume(TokenType.keyword_escapeLoop))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_loop) )
        return

      elseIf (consume(TokenType.keyword_escapeIf))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_if) )
        return

      elseIf (consume(TokenType.keyword_escapeTry))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_try) )
        return

      elseIf (consume(TokenType.keyword_escapeUse))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_use) )
        return

      elseIf (consume(TokenType.keyword_escapeWhich))
        cur_statement_list.add( CmdEscape(t,CmdControlStructure.type_which) )
        return
      endIf

      if (consume(TokenType.keyword_nextIteration))
        cur_statement_list.add( CmdNextIteration(t) )
        return
      endIf

#{
      if (consume(TokenType.keyword_necessary))
        cur_statement_list.add( CmdNecessary(t, parse_expression))
        return
      endIf

      if (consume(TokenType.keyword_sufficient))
        cur_statement_list.add( CmdSufficient(t, parse_expression))
        return
      endIf
}#

#{
      if (consume(TokenType.keyword_swapValues))
        consume_eols
        local has_parens = consume( TokenType.symbol_open_paren )
        consume_eols
        local a = parse_expression
        consume_eols
        must_consume( TokenType.symbol_comma )
        consume_eols
        local b = parse_expression
        consume_eols
        if (has_parens) must_consume( TokenType.symbol_close_paren )
        local v = this_method.add_local( t, Program.create_unique_id, null, a )
        cur_statement_list.add( CmdLocalDeclaration(t,v,a) )
        cur_statement_list.add( CmdAssign(t,a.cloned,b) )
        cur_statement_list.add( CmdAssign(t,b.cloned,CmdAccess(t,v.name)) )
        return
      endIf

      if (consume(TokenType.symbol_plus_plus))
        cur_statement_list.add( CmdAdjust(t, parse_expression,1) )
        return
      endIf

      if (consume(TokenType.symbol_minus_minus))
        cur_statement_list.add( CmdAdjust(t, parse_expression,-1) )
        return
      endIf
}#
      consume_eols

      local expression = parse_expression

      t = peek
      if (consume(TokenType.symbol_equals))
        cur_statement_list.add( CmdAssign(t,expression,parse_expression) )
        return
      endIf
#{

      if (t.type.is_op_with_assign)
        read
        cur_statement_list.add( CmdModifyAndAssign( t, expression, t.type, parse_expression ) )
        return
      endIf

      if (consume(TokenType.symbol_plus_plus))
        cur_statement_list.add( CmdAdjust(t, expression,1) )
        return
      endIf

      if (consume(TokenType.symbol_minus_minus))
        cur_statement_list.add( CmdAdjust(t, expression,-1) )
        return
      endIf
}#
      local t_type = t.type
#{
      if (t_type.is_op_with_assign)
        read
        local target = expression
        local new_value = parse_expression
        cur_statement_list.add( CmdModifyAndAssign( t, target, t_type, new_value) )
        return
      endIf
}#

      # No-parens args can follow an initial expression
      if (not next_is_end_command and next_is_statement)
        local access = expression as CmdAccess
        if (access and access.args is null)
          local args = CmdArgs()
          while (not next_is_end_command and not peek.is_structure)
            args.add( parse_expression )
          endWhile
          access.args = args
        endIf
      endIf

      cur_statement_list.add( expression )

#{
    method parse_which->CmdWhich
      local t = read  # 'which'
      local cmd_which = CmdWhich( t, parse_expression )
      must_consume_eols
      while (next_is(TokenType.keyword_case))
        t = read  # 'case'
        consume_eols
        local cmd_case = cmd_which.add_case( t )
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          cmd_case.conditions.add( parse_expression )
          consume_eols
        endWhile
        if (consume(TokenType.symbol_colon)) consume_eols
        parse_multi_line_statements( cmd_case.statements )
      endWhile

      if (next_is(TokenType.keyword_others))
        t = read  # 'others'
        consume_eols
        local cmd_case = cmd_which.add_case_others( t )
        if (consume(TokenType.symbol_colon)) consume_eols
        parse_multi_line_statements( cmd_case.statements )
      endIf

      must_consume( TokenType.keyword_endWhich )
      return cmd_which

    method parse_contingent->CmdContingent
      local t = read  # 'contingent'
      local cmd_contingent = CmdContingent( t )
      parse_multi_line_statements( cmd_contingent.statements )

      if (consume(TokenType.keyword_satisfied))
        cmd_contingent.satisfied_statements = CmdStatementList()
        parse_multi_line_statements( cmd_contingent.satisfied_statements )
      endIf

      if (consume(TokenType.keyword_unsatisfied))
        cmd_contingent.unsatisfied_statements = CmdStatementList()
        parse_multi_line_statements( cmd_contingent.unsatisfied_statements )
      endIf

      must_consume( TokenType.keyword_endContingent )
      return cmd_contingent
}#

    method parse_try_statement->CmdTry
      local t = read  # 'try'
      local cmd_try = CmdTry( t )
      if (consume_eols)
        # try
        #   multi-line commands
        # catch ([var_name:]ExceptionType)
        #   multi-line commands
        # [catch ...]*
        # endTry
        parse_multi_line_statements( cmd_try.statements )
        while (next_is(TokenType.keyword_catch))
          local cmd_catch = cmd_try.add_catch( read )
          consume_eols
          must_consume( TokenType.symbol_open_paren )
          local error_t = peek
          local error_name = parse_type_name
          consume_eols
          if (consume(TokenType.symbol_colon))
            cmd_catch.error_var = this_method.add_local( error_t, error_name )
            cmd_catch.error_type = parse_type
            consume_eols
          else
            cmd_catch.error_type = error_name
          endIf
          consume_eols
          must_consume( TokenType.symbol_close_paren )
          parse_multi_line_statements( cmd_catch.statements )
        endWhile
        must_consume( TokenType.keyword_endTry )

      else
        # try single; line; commands
        parse_single_line_statements( cmd_try.statements )
        local cmd_catch = cmd_try.add_catch( t )
        cmd_catch.error_type = "Exception"
      endIf

      return cmd_try

#{
    method parse_use_statement->CmdBlock
      # Transform
      #   use v = expr
      #      ...
      #   endUse
      # ->
      #   block
      #     local err : Exception
      #     local v = expr.on_use
      #     try
      #       ...
      #     catch (e:Exception)
      #       err = e
      #     endTry
      #     err = v.on_end_use( err )
      #     if (err) throw err
      #   endBlock
      local t = read  # 'use'
      local expr = parse_expression
      local access = expr as CmdAccess
      local v_name : String
      if (consume(TokenType.symbol_equals))
        if (access is null or access.context or access.args)
          throw expr.t.error( "Variable name expected." )
        else
          v_name = access.name
          expr = parse_expression
        endIf
      else
        v_name = Program.create_unique_id
      endIf
      must_consume_eols

      local cmd_try = CmdTry( t )
      cmd_try.control_type = CmdControlStructure.type_use
      parse_multi_line_statements( cmd_try.statements )

      local err_v = this_method.add_local( t, Program.create_unique_id, Program.type_Exception )

      local cmd_catch = cmd_try.add_catch( t )
      cmd_catch.error_var = this_method.add_local( t, Program.create_unique_id, Program.type_Exception )
      cmd_catch.statements.add( CmdAssign(t,err_v,CmdAccess(t,cmd_catch.error_var)) )

      local cmd_block = CmdBlock( t )
      cmd_block.statements.add( CmdLocalDeclaration(t,err_v) )
      local v = this_method.add_local( t, v_name, null, CmdAccess(expr.t,expr,"on_use") )
      cmd_block.statements.add( CmdLocalDeclaration(t,v) )
      cmd_block.statements.add( cmd_try )

      cmd_block.statements.add( CmdAssign(t,err_v,CmdAccess(t,CmdAccess(t,v),"on_end_use",CmdAccess(t,err_v))) )

      local cmd_if = CmdIf( t, CmdLogicalize(t,CmdAccess(t,err_v)) )
      cmd_if.statements.add( CmdThrow(t,CmdAccess(t,err_v)) )

      cmd_block.statements.add( cmd_if )

      consume_eols
      must_consume( TokenType.keyword_endUse )
      return cmd_block

    method parse_try_expression->Cmd
      # try expression else expression
      local t = read  # 'try'
      local try_expression = parse_expression
      must_consume( TokenType.keyword_else )
      local else_expression = parse_expression

      # type_Object here is a placeholder to prevent an error message
      local result_var = this_method.add_local( t, Program.create_unique_id, Program.type_Object )
      cur_statement_list.add( CmdLocalDeclaration(t,result_var) )
      cur_statement_list.add( CmdTryExpression( t, try_expression, else_expression, result_var ) )
      return CmdReadLocal( t, result_var )
}#

    method parse_local_or_global( &is_local )
      local_declarations.clear
      local t = read   # "local" or "global"

#{
      # Destructuring/tuple assignment
      if (next_is(TokenType.symbol_open_paren))
        local expression = parse_expression
        if ((expression as CmdTuple) is null)
          throw expression.t.error("Expected tuple of variables for destructuring assignment.")
        endIf
        (expression as CmdTuple).synthesize_variables = true
        must_consume(TokenType.symbol_equals)
        t = peek
        cur_statement_list.add( CmdAssign(t,expression,parse_expression) )
        return
      endIf
}#

      # local[=initial_value] [, ...]
      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        t = peek
        local name = read_identifier
        local v = Local(t,name) #this_method.add_local( t, name )
        local_declarations.add( v )
        if (consume(TokenType.symbol_equals)) v.initial_value = parse_expression
      endWhile


      # Turn each declaration into a separate CmdLocalDeclaration
      if (is_local)
        # locals
        forEach (v in local_declarations)
          cur_statement_list.add( CmdLocalDeclaration(v.t,v) )
        endForEach
      else
        throw RoseError("Currently unsupported")
#{
        # global properties
        forEach (v in local_declarations)
            if (not v.initial_value)
              v.initial_value = v.type.create_default_value( v.t )
            endIf
          endIf
          cur_statement_list.add( CmdAssign( v.t, CmdAccess(v.t,"Global",v.name), v.initial_value ) )
          v.initial_value = null
          Program.add_global_var( Property(v.t,Program.type_Global,v.name,v.type) )
        endForEach
}#
      endIf

    method parse_type( allow_at_sign=false:Logical )->String
      return parse_type_name(allow_at_sign)

    method parse_type_name( allow_at_sign=false:Logical )->String
      local t = peek
      local name : String

      if (consume(TokenType.symbol_open_paren))
        # Allow parens around everything before '?' and '[]'; necessary to be able to
        # disambiguate template methods that return optional function types and function
        # type lists.  For example, in Template<<$X>> with a method m->$X?, if $X is
        # Function()->Logical, then $X? reads as Function()->(Logical?) when you may
        # want Function()->(Logical)?.  We can write ->($X)? as an alternative.
        name = parse_type_name
        if (next_is(TokenType.symbol_comma))
          while (next_is(TokenType.symbol_comma))
            read # comma
            name += "," + parse_type_name
          endWhile
          name = "Tuple<<$>>" (name)
        endIf
        must_consume( TokenType.symbol_close_paren )

      elseIf (consume(TokenType.symbol_at_brace))
        # 'allow_at_sign' refers to allowing direct variable access; regardless of
        # that we still need to check for @{} and @[]
        name = "ValueTable"
        must_consume( TokenType.symbol_close_brace )

      elseIf (consume(TokenType.symbol_at_bracket))
        name = "ValueList"
        must_consume( TokenType.symbol_close_bracket )

      else
        name = read_identifier( allow_at_sign )

        if (name == "operator")
          name += reader.read->String  # add on next token
        endIf

#{
        if (name == "Function")
          local parameter_types : Type[]
          local return_type : Type
          if (consume(TokenType.symbol_open_paren))
            if (not consume(TokenType.symbol_close_paren))
              parameter_types = Type[]
              local first = true
              while (first or consume(TokenType.symbol_comma))
                first = false
                local type_t = peek
                local type_name = parse_type_name
                parameter_types.add( Program.get_type_reference(type_t,type_name) )
              endWhile
              must_consume( TokenType.symbol_close_paren )
            endIf
          endIf

          if (consume(TokenType.symbol_arrow))
            consume_eols
            if (not consume(TokenType.symbol_open_paren))
              throw peek.error( "A Function return type must be enclosed in (parens)." )
            endIf
            consume_eols
            return_type = parse_type
            consume_eols
            must_consume( TokenType.symbol_close_paren )
          endIf

          name = Program.get_callback_type_reference( t, parameter_types, return_type ).name
        endIf
}#
      endIf

      loop
        if (consume(TokenType.symbol_empty_brackets))
          name += "[]"
        elseIf (consume(TokenType.symbol_question_mark))
          name += "?"
        else
          escapeLoop
        endIf
      endLoop

      return name

    method parse_if->CmdIf
      local t = read
      local cmd_if = CmdIf( t )
      cmd_if.condition = parse_expression

      if (consume_eols)
        # multi-line if
        parse_multi_line_statements( cmd_if.statements )

        t = peek
        local cur_if = cmd_if
        while (next_is(TokenType.keyword_elseIf))
          # Need logic to avoid dangling elseIf problems.
          local starting_position = reader.position
          read  # 'elseIf'

          local elseIf_condition = parse_expression

          if (consume(TokenType.eol))
            # This elseIf IS part of the current multiline 'if'
            local cmd_else_if = CmdIf( t, elseIf_condition, CmdControlStructure.type_else_if  )
            parse_multi_line_statements( cmd_else_if.statements )
            cur_if.else_statements = CmdStatementList()
            cur_if.else_statements.add( cmd_else_if )
            cur_if = cmd_else_if
          else
            # This elseIf actually belongs to something else; undo and abort
            reader.position = starting_position
            escapeWhile
          endIf
          t = peek
        endWhile

        if (next_is(TokenType.keyword_else) and reader.peek(1).type is TokenType.eol)
          read
          cur_if.else_statements = CmdStatementList()
          parse_multi_line_statements( cur_if.else_statements )
        endIf

        must_consume( TokenType.keyword_endIf )

      else
        # single-line if
        parse_single_line_statements( cmd_if.statements )
        consume_eols

        t = peek
        local cur_if = cmd_if
        while (next_is(TokenType.keyword_elseIf))
          # Need logic to avoid dangling elseIf problems.
          local starting_position = reader.position
          read  # 'elseIf'

          local elseIf_condition = parse_expression

          if (next_is(TokenType.eol))
            # This elseIf belongs to another if statement - undo and abort
            reader.position = starting_position
            escapeWhile
          else
            local cmd_else_if = CmdIf( t, elseIf_condition, CmdControlStructure.type_else_if )
            parse_single_line_statements( cmd_else_if.statements )
            cur_if.else_statements = CmdStatementList()
            cur_if.else_statements.add( cmd_else_if )
            cur_if = cmd_else_if
            must_consume_eols
          endIf
          t = peek
        endWhile

        if (next_is(TokenType.keyword_else) and reader.peek(1).type is not TokenType.eol)
          read
          cur_if.else_statements = CmdStatementList()
          parse_single_line_statements( cur_if.else_statements )
        endIf
      endIf

      return cmd_if

    method parse_loop->CmdGenericLoop
      local t = read  # 'loop'
      local cmd_loop = CmdGenericLoop( t, CmdControlStructure.type_loop, null )

      if (not consume_eols)
        # loop N
        #   ...
        # endLoop
        local control_var = this_method.add_local( t, program.create_unique_id )
        control_var.initial_value = CmdLiteralInt32( t, 1 )

        local last_var = this_method.add_local( t, program.create_unique_id )
        last_var.initial_value = parse_expression

        local step_cmd = CmdAdjustLocal( t, control_var, 1 )

        cmd_loop.condition = CmdCompareLE(t,CmdReadLocal(t,control_var),CmdReadLocal(t,last_var))

        cmd_loop.add_control_var( control_var )
        cmd_loop.add_control_var( last_var )
        cmd_loop.add_upkeep( step_cmd )

        if (not consume_eols)
          parse_single_line_statements( cmd_loop.statements )
          return cmd_loop
        endIf
      endIf

      parse_multi_line_statements( cmd_loop.statements )
      must_consume( TokenType.keyword_endLoop )

      return cmd_loop

    method parse_block->CmdBlock
      local t = read
      local cmd_block = CmdBlock( t )

      must_consume_eols
      parse_multi_line_statements( cmd_block.statements )
      must_consume( TokenType.keyword_endBlock )

      return cmd_block

    method parse_while->CmdGenericLoop
      local t = read
      local cmd_while = CmdGenericLoop( t, CmdControlStructure.type_while, parse_expression )

      if (consume_eols)
        # multi-line while
        parse_multi_line_statements( cmd_while.statements )
        must_consume( TokenType.keyword_endWhile )
      else
        # single-line while
        parse_single_line_statements( cmd_while.statements )
        consume_eols
      endIf

      return cmd_while
#{

    method parse_for_each->Cmd
      local t = read  # 'forEach'

      local has_parens = consume( TokenType.symbol_open_paren )

      local expr = parse_expression
      local access = expr as CmdAccess
      local access_tuple = expr as CmdTuple
      if (access or access_tuple)
        if (access and (access.context or access.args))
          throw access.t.error( "Single identifier expected for control variable name." )
        else
          local index_var_name : String
          if (access and access.name == "at")
            # forEach (at index in list) - variant of forEach (value at index in list)
            throw access.t.error( "Missing element name before 'at'." )
          elseIf (consume("at"))
            index_var_name = read_identifier
          endIf

          local collection_var_name : String
          if (consume(TokenType.keyword_in))
            local collection = parse_expression
            if (consume(TokenType.symbol_equals))
              contingent
                local var_name = collection as CmdAccess
                necessary (var_name)
                necessary (var_name.context is null)
                necessary (var_name.args is null)
                collection_var_name = var_name.name
                collection = parse_expression
              unsatisfied
                throw collection.t.error( "Variable name expected before '='." )
              endContingent
            endIf

            local range = collection as CmdRange
            if (range)
              if (index_var_name ) throw range.t.error( "Cannot use 'at' with a range." )
              if (not access) throw range.t.error( "Cannot use 'at' with destructuring." )

              local cmd_for_each = create_generic_loop_from_range( t, access.name, range )

              if (has_parens) must_consume( TokenType.symbol_close_paren )
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )

              return cmd_for_each

            else
              local first_cmd, last_cmd, step_cmd : Cmd

              if (consume("from"))
                local from_cmd = parse_expression
                local from_range = from_cmd as CmdRange
                if (from_range)
                  first_cmd = from_range.first
                  last_cmd = from_range.last
                  step_cmd = from_range.step_cmd
                else
                  first_cmd = from_cmd
                endIf
              endIf

              if (not step_cmd and consume(TokenType.keyword_step))
                step_cmd = parse_expression
              endIf

              if (has_parens) must_consume( TokenType.symbol_close_paren )

              local cmd_for_each : CmdForEach
              if (access)
                cmd_for_each = CmdForEach( t, access.name, index_var_name, collection, step_cmd )
              else
                cmd_for_each = CmdForEach( t, access_tuple, index_var_name, collection, step_cmd )
              endIf
              cmd_for_each.first_cmd = first_cmd
              cmd_for_each.last_cmd = last_cmd
              cmd_for_each.collection_var_name = collection_var_name
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )
              return cmd_for_each
            endIf

          elseIf (consume(TokenType.keyword_of))
            if (index_var_name ) throw t.error( "Cannot use 'at' with forEach-of." )
            local collection = parse_expression
            if (consume(TokenType.symbol_equals))
              contingent
                local var_name = collection as CmdAccess
                necessary (var_name)
                necessary (var_name.context is null)
                necessary (var_name.args is null)
                collection_var_name = var_name.name
                collection = parse_expression
              unsatisfied
                throw collection.t.error( "Variable name expected before '='." )
              endContingent
            endIf

            local range = collection as CmdRange
            if (range)
              throw t.error( "Use forEach-in with a literal range instead of forEach-of." )
            else
              local first_cmd, last_cmd, step_cmd : Cmd

              if (consume("from"))
                local from_cmd = parse_expression
                local from_range = from_cmd as CmdRange
                if (from_range)
                  first_cmd = from_range.first
                  last_cmd = from_range.last
                  step_cmd = from_range.step_cmd
                else
                  first_cmd = from_cmd
                endIf
              endIf

              if (not step_cmd and consume(TokenType.keyword_step))
                step_cmd = parse_expression
              endIf

              if (has_parens) must_consume( TokenType.symbol_close_paren )

              local cmd_for_each = CmdForEach( t, null as String, access.name, collection, step_cmd )
              cmd_for_each.first_cmd = first_cmd
              cmd_for_each.last_cmd = last_cmd
              cmd_for_each.collection_var_name = collection_var_name
              parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )
              return cmd_for_each
            endIf

          else
            throw t.error( "Syntax error in forEach - keyword 'in' or 'of' expected." )
          endIf
        endIf

      else
        # forEach (expr) e.g. forEach (1..n)
        local range = expr as CmdRange
        if (range)
          local cmd_for_each = create_generic_loop_from_range( t, Program.create_unique_id, range )
          if (has_parens) must_consume( TokenType.symbol_close_paren )
          parse_single_or_multi_line_statements( cmd_for_each.statements, TokenType.keyword_endForEach )

          return cmd_for_each

        else
          throw t.error( "Invalid syntax in forEach." )
        endIf

      endIf

      trace
      throw expr.t.error( "[INTERNAL ERROR]" )

    method create_generic_loop_from_range( t:Token, control_var_name:String, range:CmdRange )->CmdGenericLoop
      local control_var = this_method.add_local( t, control_var_name )
      control_var.initial_value = range.first

      local last_var = this_method.add_local( t, Program.create_unique_id )
      last_var.initial_value = range.last

      local step_cmd = null : Cmd
      if (range.step_size)
        step_cmd = CmdModifyAndAssignLocal( range.t, control_var, TokenType.symbol_plus_equals, range.step_size )
      else
        if (range instanceOf CmdRangeUpTo or range instanceOf CmdRangeUpToLessThan)
          step_cmd = CmdAdjustLocal( range.t, control_var, 1 )
        else
          step_cmd = CmdAdjustLocal( range.t, control_var, -1 )
        endIf
      endIf

      local compare_cmd : Cmd
      if (range instanceOf CmdRangeUpTo)
        compare_cmd = CmdCompareLE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
      elseIf (range instanceOf CmdRangeUpToLessThan)
        compare_cmd = CmdCompareLT( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
      else
        compare_cmd = CmdCompareGE( t, CmdReadLocal(t,control_var), CmdReadLocal(t,last_var) )
      endIf

      local cmd_for_each = CmdGenericLoop( t, CmdControlStructure.type_forEach, compare_cmd )

      cmd_for_each.add_control_var( control_var )
      cmd_for_each.add_control_var( last_var )
      cmd_for_each.add_upkeep( step_cmd )
      return cmd_for_each
}#

    method peek->Token
      return reader.peek

    method read->Token
      return reader.read

    method read_identifier( allow_at_sign=false:Logical )->String
      local direct_access = false
      if (allow_at_sign) direct_access = consume( TokenType.symbol_at )

#{
      if (not next_is(TokenType.identifier))
        if (next_is(TokenType.type_identifier))
          local result = read->Type.name
          if (direct_access) result = "@" + result
          return result
        endIf
        if (peek.type is TokenType.placeholder_id and allow_placeholder_ids)
          # Template tokens are being searched through; allow placeholder ids
          # to act as regular ids for now
          return read->String
        endIf
        throw error( "Identifier expected, found $." (peek.quoted_name) )
      endIf
}#

      local result = read->String
      if (direct_access) result = "@" + result
      #while (consume(TokenType.symbol_colon_colon))
      #result += "::" + read_identifier
      #endWhile
      return result

    method parse_expression->Cmd
      consume_eols
      return parse_range

    method parse_range->Cmd
      return parse_range( parse_logical_xor )

    method parse_range( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_upTo))
        local result = CmdRangeUpTo( t, lhs, parse_logical_xor )
        if (consume(TokenType.keyword_step)) result.step_size = parse_expression
        return result
#{
      elseIf (consume(TokenType.symbol_upToLessThan))
        local result = CmdRangeUpToLessThan( t, lhs, parse_logical_xor )
        if (consume(TokenType.keyword_step)) result.step_size = parse_expression
        return result
      elseIf (consume(TokenType.keyword_downTo))
        local result = CmdRangeDownTo( t, lhs, parse_logical_xor )
        if (consume(TokenType.keyword_step)) result.step_size = parse_expression
        return result
}#
      else
        return lhs
      endIf

    method parse_logical_xor->Cmd
      return parse_logical_xor( parse_logical_or )

    method parse_logical_xor( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_xor))
        consume_eols
        return parse_logical_xor( CmdLogicalXor(t, lhs, parse_logical_or) )
      endIf
      return lhs

    method parse_logical_or->Cmd
      return parse_logical_or( parse_logical_and )

    method parse_logical_or( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_or))
        consume_eols
        return parse_logical_or( CmdLogicalOr(t, lhs, parse_logical_and) )
      endIf
      return lhs

    method parse_logical_and->Cmd
      return parse_logical_and( parse_comparison )

    method parse_logical_and( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.keyword_and))
        consume_eols
        return parse_logical_and( CmdLogicalAnd(t, lhs, parse_comparison) )
      endIf
      return lhs

    method parse_comparison->Cmd
      return parse_comparison( parse_bitwise_xor )

    method parse_comparison( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_eq))
        consume_eols
        return parse_comparison( CmdCompareEQ(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.keyword_is))
        consume_eols
        if (consume(TokenType.keyword_not))
          return parse_comparison( CmdCompareIsNot(t, lhs, parse_bitwise_xor) )
        endIf
        return parse_comparison( CmdCompareIs(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_ne))
        consume_eols
        return parse_comparison( CmdCompareNE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_lt))
        consume_eols
        return parse_comparison( CmdCompareLT(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_gt))
        consume_eols
        return parse_comparison( CmdCompareGT(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_le))
        consume_eols
        return parse_comparison( CmdCompareLE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_ge))
        consume_eols
        return parse_comparison( CmdCompareGE(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.symbol_compare))
        consume_eols
        return parse_comparison( CmdCompare(t, lhs, parse_bitwise_xor) )
      elseIf (consume(TokenType.keyword_instanceOf))
        consume_eols
        return CmdInstanceOf( t, lhs, parse_type_name )
      elseIf (next_is(TokenType.keyword_not))
        local t2 = reader.peek(1)
        if (t2 and t2.type is TokenType.keyword_instanceOf)
          read
          read
          consume_eols
          return CmdLogicalNot( t, CmdInstanceOf( t, lhs, parse_type_name ) )
        endIf
      endIf
      return lhs

    method parse_bitwise_xor->Cmd
      return parse_bitwise_xor( parse_bitwise_or )

    method parse_bitwise_xor( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_tilde))
        consume_eols
        return parse_bitwise_xor( CmdBitwiseXor(t,lhs,parse_bitwise_or) )
      endIf
      return lhs

    method parse_bitwise_or->Cmd
      return parse_bitwise_or( parse_bitwise_and )

    method parse_bitwise_or( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_vertical_bar))
        consume_eols
        local rhs = parse_bitwise_and
        return parse_bitwise_or( CmdBitwiseOr(t,lhs,rhs) )
      endIf
      return lhs

    method parse_bitwise_and->Cmd
      return parse_bitwise_and( parse_bitwise_shift )

    method parse_bitwise_and( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_ampersand))
        consume_eols
        return parse_bitwise_and( CmdBitwiseAnd(t,lhs,parse_bitwise_shift) )
      endIf
      return lhs

    method parse_bitwise_shift->Cmd
      return parse_bitwise_shift( parse_add_subtract )

    method parse_bitwise_shift( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_shift_left))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftLeft(t,lhs,parse_add_subtract) )
      elseIf (consume(TokenType.symbol_shift_right))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftRight(t,lhs,parse_add_subtract) )
      elseIf (consume(TokenType.symbol_shift_right_x))
        consume_eols
        return parse_add_subtract( CmdBitwiseShiftRightX(t,lhs,parse_add_subtract) )
      endIf
      return lhs

    method parse_add_subtract->Cmd
      return parse_add_subtract( parse_multiply_divide_mod )

    method parse_add_subtract( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_plus))
        consume_eols
        return parse_add_subtract( CmdAdd(t,lhs,parse_multiply_divide_mod) )
      elseIf (consume(TokenType.symbol_minus))
        consume_eols
        return parse_add_subtract( CmdSubtract(t,lhs,parse_multiply_divide_mod) )
      endIf
      return lhs

    method parse_multiply_divide_mod->Cmd
      return parse_multiply_divide_mod( parse_power )

    method parse_multiply_divide_mod( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_times))
        consume_eols
        return parse_multiply_divide_mod( CmdMultiply(t,lhs,parse_power) )
      elseIf (consume(TokenType.symbol_slash))
        consume_eols
        return parse_multiply_divide_mod( CmdDivide(t,lhs,parse_power) )
      elseIf (consume(TokenType.symbol_percent))
        consume_eols
        return parse_multiply_divide_mod( CmdMod(t,lhs,parse_power) )
      endIf
      return lhs

    method parse_power->Cmd
      return parse_power( parse_pre_unary )

    method parse_power( lhs:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_caret))
        consume_eols
        return parse_power( CmdPower(t,lhs,parse_pre_unary) )
      endIf
      return lhs

    method parse_pre_unary->Cmd
      local t = peek

      if (consume(TokenType.symbol_minus))
        consume_eols
        return CmdNegate( t, parse_pre_unary )

      elseIf (consume(TokenType.keyword_not))
        consume_eols
        return CmdLogicalNot( t, parse_pre_unary )

      elseIf (consume(TokenType.symbol_exclamation_point))
        consume_eols
        return CmdBitwiseNot( t, parse_pre_unary )
      endIf
      return parse_post_unary

    method parse_post_unary->Cmd
      return parse_post_unary( parse_member_access )

    method parse_post_unary( operand:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_question_mark))
        return parse_post_unary( CmdLogicalize(t,operand) )
      elseIf (consume(TokenType.keyword_isReference))
        return parse_post_unary( CmdIsReference(t,operand) )
      endIf
      return operand

    method parse_member_access->Cmd
      return parse_member_access( parse_term )

    method parse_member_access( context:Cmd )->Cmd
      local t = peek
      if (consume(TokenType.symbol_dot))
        # Part access e.g. obj.value
        local access = parse_access( t, context )
        return parse_member_access( access )
      elseIf (consume(TokenType.symbol_slash_slash))
        # Identifier access, e.g. table//key -> table["key"]
        local name = read_identifier
        return parse_member_access( CmdElementAccess(t, context, CmdLiteralString(t,name)) )
      elseIf (consume(TokenType.symbol_open_bracket))
        # context[index]
        consume_eols
        local access = CmdElementAccess( t, context, parse_expression_allowing_query )
        consume_eols
        must_consume( TokenType.symbol_close_bracket )
        return parse_member_access( access )
      elseIf (consume(TokenType.symbol_arrow))
        # Conversion operation e.g. value->Int32
        consume_eols
        local to_type = parse_type

        if (next_is(TokenType.symbol_open_paren))
          local access = CmdAccess( t, context, "to_" + to_type, CmdArgs() )
          access.named_args = parse_args( access.args )
          return parse_member_access( access )
        endIf
        return parse_member_access( CmdConvertToType(t,context,to_type) )

#{
      elseIf (consume(TokenType.symbol_fat_arrow))
        # Callback creator e.g. obj=>method_name or Type=>routine_name
        consume_eols
        local name = read_identifier
        local arg_types : Type[]
        consume_eols
        if (consume(TokenType.symbol_open_paren))
          arg_types = Type[]
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            consume_eols
            arg_types.add( parse_type )
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_paren )
          consume_eols
        endIf
        local return_type : Type
        if (consume(TokenType.symbol_arrow)) return_type = parse_type
        return CmdCreateCallback( t, context, name, Program.get_callback_type_signature(arg_types), return_type )

      elseIf (consume(TokenType.keyword_as))
        # Recast operation e.g. actor as Hero
        consume_eols
        local as_type = parse_type
        return parse_member_access( CmdAs(t,context,as_type) )
}#
      endIf

      return context

    method parse_access( t:Token, context=null:Cmd )->Cmd
      consume_eols
#{
      if (consume(TokenType.keyword_meta))
        # TODO: need to wrap the following in a Cmd and defer checking for the implicit type until after parsing is over
        local context_type : Type
        if (context) context_type = context.implicit_type( Scope(this_type,null) )
        else         context_type = this_type
        if (not context_type)
          trace context
          throw t.error( "Unable to determine type for metadata access." )
        endIf

        must_consume( TokenType.symbol_dot )
        t = peek
        local id = read_identifier
        which (id)
          case "default_value"
            return CmdDefaultValue( t, context_type )
          others
            throw t.error( "'default_value' expected after 'meta.'." )
        endWhich
      endIf
}#
      # In parse_access()
      local access = CmdAccess( t, parse_type_name(true) )
      if (next_is(TokenType.symbol_open_paren))
        access.args = CmdArgs()
        access.named_args = parse_args( access.args )
      endIf

      if (context)
        access.context = context
#{
      elseIf (access.args and consume(TokenType.keyword_instance))
        # In-line class definition
        local type_name = "$_$" (access.name,Program.create_unique_id)
        local inline_type = Program.get_type_reference( t, type_name )
        local template = Template( t, type_name, Attribute.is_class )
        parse_template_tokens( template, TokenType.keyword_endInstance )
        inline_type.base_types.add( Program.get_type_reference(t,access.name) )
        access.name = type_name
}#
      endIf

      return access

    # TODO: Add multi-line handling
    method parse_args( args:CmdArgs )->CmdNamedArg[]
      local named_args : CmdNamedArg[]
      local end_type   = TokenType.symbol_close_paren

      consume( TokenType.symbol_open_paren )
      consume_eols

      if (not consume(end_type))
        local first = true
        while (first or consume(TokenType.symbol_comma))
          first = false
          consume_eols
#{
          if (consume(TokenType.symbol_ampersand))
            if (not named_args) named_args = CmdNamedArg[]
            local is_negative = consume( TokenType.symbol_exclamation_point )
            local arg_t = peek
            local arg = CmdNamedArg( arg_t, read_identifier )
            arg.is_negative = is_negative
            named_args.add( arg )
            if (consume(TokenType.symbol_equals))
              arg.value = parse_expression_allowing_query
            endIf
          else
}#
            args.add( parse_expression_allowing_query )
#{
          endIf
}#
        endWhile
        consume_eols
        must_consume( end_type )
      endIf

      return named_args

    method parse_expression_allowing_query->Cmd
#{
      local prior_setting = implicit_access_used
      implicit_access_used = false
}#
      local expr = parse_expression
#{
      if (implicit_access_used)
        expr = CmdCreateFunction( expr.t, FnParam[][FnParam("value")], null, null, CmdStatementList(), null, &is_generic, &query_cmd=expr )
      endIf

      implicit_access_used = prior_setting
}#
      return expr

    method parse_term->Cmd
      local t = peek
#      local rewind_pos = reader.position  # if this (expression) is followed by => we have a function definition

      if (consume(TokenType.symbol_open_paren))
        consume_eols
        contingent
          # Parse this (expression) while possibly aborting and switching to parsing
          # a (generic,function)=>definition.
#{
          if (consume(TokenType.symbol_close_paren))
            sufficient (next_is(TokenType.symbol_fat_arrow))
            sufficient (next_is(TokenType.keyword_with))
            throw t.error( "Value expected, found empty parentheses ()." )
          endIf
}#
          local result = null : Cmd
          if (not next_is(TokenType.symbol_comma))
            result = parse_expression
            consume_eols
          endIf
#{
          if (next_is(TokenType.symbol_comma))
            local elements = Cmd[]
            if (result is null) result = CmdNoAction(peek)
            elements.add(result)
            while (consume(TokenType.symbol_comma))
              consume_eols
              if (next_is(TokenType.symbol_comma))
                # For skipping values in destructuring assignment.
                # Currently illegal for value (non-assignment) tuples, but could also
                # be used for Python-style single-element tuples: "(1,)".
                # We insert a NoAction as a placeholder which we can identify in
                # resolve(), and which lets us carry the token through.
                elements.add(CmdNoAction(peek))
              elseIf (next_is(TokenType.symbol_close_paren))
               # They skipped the last item.
                elements.add(CmdNoAction(peek))
                escapeWhile
              else
                elements.add(parse_expression())
              endIf
              consume_eols
            endWhile
            result = CmdTuple(t, elements)
          endIf
}#
          must_consume( TokenType.symbol_close_paren )
#{
          sufficient (next_is(TokenType.keyword_with))
          sufficient (next_is(TokenType.symbol_fat_arrow))

          if (result instanceOf CmdTuple)
            sufficient (next_is(TokenType.symbol_empty_brackets))
            sufficient (next_is(TokenType.symbol_question_mark))
          endIf
}#
          return result
#{
       satisfied
          if (next_is(TokenType.symbol_empty_brackets) or next_is(TokenType.symbol_question_mark))
            # Rewind and parse a type instead
            reader.position = rewind_pos
            return parse_access( t )
          endIf

          # Rewind and parse a generic function instead.
          reader.position = rewind_pos
          return parse_function( t )
}#
        endContingent

      elseIf (next_is(TokenType.identifier) #{or next_is(TokenType.symbol_at) or next_is(TokenType.keyword_meta)}#)
        local result = parse_access( t )
        local access = result as CmdAccess
        if (access and access.name.ends_with(']') and not access.args)
          if (next_is(TokenType.symbol_open_bracket)) return parse_typed_literal_list( access.t, access.name )
        endIf
        return result



      elseIf (consume(TokenType.literal_string))
        if (consume(TokenType.symbol_open_paren))
          local first = true
          local args = CmdArgs()
          while (first or consume(TokenType.symbol_comma))
            first = false
            args.add( parse_expression )
          endWhile
          must_consume( TokenType.symbol_close_paren )
          return CmdFormattedString( t, t->String, args )
        endIf

        return CmdLiteral( t, Value(t->String) )

      elseIf (consume(TokenType.keyword_null))
        return CmdLiteral(t, Value(null as Object))

      elseIf (consume(TokenType.literal_real64))
        return CmdLiteral( t, Value(t->Real64) )

      elseIf (consume(TokenType.literal_int32))
        return CmdLiteral( t, Value(t->Int32) )

      elseIf (consume(TokenType.literal_int64))
        return CmdLiteral( t, Value(t->Int64) )

#{
      elseIf (consume(TokenType.keyword_this))
        return CmdLiteralThis( t, this_type )
}#

      elseIf (consume(TokenType.keyword_true))
        return CmdLiteral( t, Value(true) )

      elseIf (consume(TokenType.keyword_false))
        return CmdLiteral( t, Value(false) )

      elseIf (consume(TokenType.keyword_pi))
        return CmdLiteral( t, Value(pi) )

      elseIf (consume(TokenType.keyword_infinity))
        return CmdLiteral( t, Value(1.0/0.0) )

      elseIf (consume(TokenType.keyword_NaN))
        return CmdLiteral( t, Value(0.0/0.0) )


#{
      elseIf (consume(TokenType.literal_character))
        local value = t->Character
        return CmdLiteralCharacter( t, value->Character )
}#


#{
      elseIf (consume(TokenType.symbol_open_bracket))
        # [ literal, list ]
        local elements = CmdArgs()
        consume_eols
        if (not consume(TokenType.symbol_close_bracket))
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            elements.add( parse_expression )
            consume_eols
          endWhile
          must_consume( TokenType.symbol_close_bracket )
        endIf

        return CmdCreateList( t, elements )
}#
      elseIf (consume(TokenType.symbol_at_brace))
        return parse_value_table( t )

      #elseIf (consume(TokenType.symbol_at_bracket))
      elseIf (consume(TokenType.symbol_open_bracket))
        return parse_value_list( t )
      elseIf (consume(TokenType.symbol_empty_braces))
        return CmdAccess( t, "ValueTable", CmdArgs() )

      elseIf (consume(TokenType.symbol_empty_brackets))
        return CmdAccess( t, "ValueList",  CmdArgs() )
#{

      elseIf (consume(TokenType.keyword_prior))
        consume_eols
        must_consume( TokenType.symbol_dot )
        consume_eols
        local name = read_identifier
        local args : CmdArgs
        local named_args : CmdNamedArg[]
        if (next_is(TokenType.symbol_open_paren))
          args = CmdArgs()
          named_args = parse_args( args )
        endIf
        return CmdCallPriorMethod( t, name, args, named_args )

      elseIf (consume(TokenType.keyword_await))
        # Insert a local result declaration and a statement list to hold the
        # await cmd and subsequent conversion.  Substitute the result var in
        # place of this term.
        #
        #   x = await some_task(a,b)
        #
        # ->
        #
        #   local result : TBD
        #   {
        #     task = some_task(a,b)   # result.type = task result type
        #     while (task.update) yield
        #     result = task.result
        #   }
        #   x = result
        #
        local result_var = this_method.add_local( t, Program.create_unique_id, Program.type_Object )
        local statement_list = CmdStatementList()
        cur_statement_list.add( CmdLocalDeclaration(t,result_var) )
        cur_statement_list.add( CmdAwait(t,parse_expression,statement_list,result_var) )
        return CmdAccess( t, result_var.name )

      elseIf (consume(TokenType.keyword_function))
        return parse_function( t )

      elseIf (next_is(TokenType.symbol_fat_arrow))
        return parse_function( t )

      elseIf (consume(TokenType.keyword_select))
        consume_eols
        local cmd_select = CmdSelect( t )

        if (consume(TokenType.symbol_open_paren))
          consume_eols
          local comparison_var = Local( t, Program.create_unique_id )
          (ensure cmd_select.undeclared_locals).add( comparison_var )
          cur_statement_list.add( CmdLocalDeclaration(t,comparison_var,&skip_initialization) )
          comparison_var.initial_value = parse_expression
          cmd_select.local_info = comparison_var
          cmd_select.expression = comparison_var.initial_value
          consume_eols
          must_consume( TokenType.symbol_close_paren )
          consume_eols
        endIf

        must_consume( TokenType.symbol_open_brace )
        local first = true
        while (first or consume(TokenType.symbol_double_vertical_bar))
          first = false
          consume_eols
          local select_case = CmdSelectCase( peek )
          cmd_select.cases.add( select_case )

          if (consume(TokenType.keyword_others))
            consume_eols
            must_consume( TokenType.symbol_colon )
            consume_eols

            # If we don't use the 'others' keyword then the last value
            # will end up in 'conditions' to begin with so stick to that
            # pattern.
            select_case.conditions.add( parse_expression )

            escapeWhile

          else
            select_case.conditions.add( parse_expression )
            while (consume(TokenType.symbol_comma))
              consume_eols
              select_case.conditions.add( parse_expression )
              consume_eols
            endWhile

            if (consume(TokenType.symbol_colon))
              consume_eols
              select_case.value = parse_expression
              consume_eols
            elseIf (select_case.conditions.count > 1)
              must_consume( TokenType.symbol_colon )  # Force an error
            endIf
          endIf
        endWhile

        # Convert any `select{ x || z }` to `local temp=x; select{ x:x || z }`
        forEach (i in 0..<cmd_select.cases.count - 1)
          local select_case = cmd_select.cases[i]
          if (not select_case.value)
            local temp_var = Local( t, Program.create_unique_id )
            (ensure cmd_select.undeclared_locals).add( temp_var )
            temp_var.initial_value = select_case.conditions.remove_last
            cur_statement_list.add( CmdLocalDeclaration(t,temp_var) )
            select_case.local_info = temp_var
            select_case.conditions.add( CmdReadLocal(t,temp_var) )
            select_case.value = CmdReadLocal(t,temp_var)
            select_case.condition_is_value = true
          endIf
        endForEach

        if (cmd_select.cases.last.conditions.count > 1)
          throw t.error( "The last part of a select{} must be a single expression." )
        elseIf (cmd_select.cases.last.value)
          throw t.error( "The last part of a select{} cannot have a condition." )
        else
          cmd_select.cases.last.value = cmd_select.cases.last.conditions.remove_first
          cmd_select.cases.last.conditions.clear
        endIf

        must_consume( TokenType.symbol_close_brace )

        return cmd_select
}#

#{
      elseIf (consume(TokenType.symbol_dollar))
        # Implicit query arg access.  E.g. list.discard( $.is_dead ) -> list.discard( (x)=>x.is_dead )
        implicit_access_used = true
        return CmdImplicitAccess( t )
}#

#{
      elseIf (consume(TokenType.keyword_forEach))
        # Implicit loop
        local var_name = Program.create_unique_id
        local control_var_name, index_var_name : String
        if (consume(TokenType.keyword_in))     control_var_name = var_name
        elseIf (consume(TokenType.keyword_of)) index_var_name = var_name
        else throw t.error( "'in' or 'of' expected after 'forEach'." )

        local collection = parse_expression
        local range = collection as CmdRange
        if (range)
          if (index_var_name) throw t.error( "Illegal use of forEach-of with literal range." )
          local cmd_for_each = create_generic_loop_from_range( t, var_name, range )
          implicit_loop_stack.add( cmd_for_each )

        else
          local first_cmd, last_cmd, step_cmd : Cmd

          if (consume("from"))
            local from_cmd = parse_expression
            local from_range = from_cmd as CmdRange
            if (from_range)
              first_cmd = from_range.first
              last_cmd = from_range.last
              step_cmd = from_range.step_cmd
            else
              first_cmd = from_cmd
            endIf
          endIf

          if (not step_cmd and consume(TokenType.keyword_step))
            step_cmd = parse_expression
          endIf

          local cmd_for_each = CmdForEach( t, control_var_name, index_var_name, collection, step_cmd )
          cmd_for_each.first_cmd = first_cmd
          cmd_for_each.last_cmd = last_cmd
          implicit_loop_stack.add( cmd_for_each )
        endIf

        return CmdAccess( t, var_name )

      elseIf (next_is(TokenType.keyword_try))
        return parse_try_expression

      elseIf (next_is(TokenType.keyword_ensure))
        return parse_ensure_expression
}#
      elseIf (consume(TokenType.keyword_assert))
        consume_eols
        local has_parens = consume( TokenType.symbol_open_paren )

        local start_t = peek
        local expr = parse_expression
        local message : Cmd
        if (consume(TokenType.symbol_double_vertical_bar)) message = parse_expression
        local end_t = peek

        if (has_parens) must_consume( TokenType.symbol_close_paren )

        #{
        if (not message)
          local buffer = StringBuilder()
          local parse_reader = RogueC.scanners_by_filepath[ start_t.filepath ]
          if (parse_reader and start_t.line and start_t.column and start_t.filepath == end_t.filepath)
            parse_reader.seek_location( start_t.line, start_t.column )
            while (parse_reader.has_another and (parse_reader.line < end_t.line or ...
                   (parse_reader.line == end_t.line and parse_reader.column < end_t.column)))
              buffer.print( parse_reader.read )
            endWhile
          endIf
          message = CmdLiteralString( t, buffer->String )
        endIf
        }#

        return CmdAssert(t, expr, message )

      elseIf (consume(TokenType.keyword_require))
        consume_eols
        local has_parens = consume( TokenType.symbol_open_paren )

        local start_t = peek
        local expr = parse_expression
        local message : Cmd
        if (consume(TokenType.symbol_double_vertical_bar)) message = parse_expression
        local end_t = peek

        if (has_parens) must_consume( TokenType.symbol_close_paren )

        #{
        if (not message)
          local buffer = StringBuilder()
          local parse_reader = RogueC.scanners_by_filepath[ start_t.filepath ]
          if (parse_reader and start_t.line and start_t.column and start_t.filepath == end_t.filepath)
            parse_reader.seek_location( start_t.line, start_t.column )
            while (parse_reader.has_another and (parse_reader.line < end_t.line or ...
                   (parse_reader.line == end_t.line and parse_reader.column < end_t.column)))
              buffer.print( parse_reader.read )
            endWhile
          endIf
          buffer.print( " in " ).print( this_type.name ).print( "." ).print( this_method.name ).print( "()" )
          message = CmdLiteralString( t, buffer->String )
        endIf
        }#

        return CmdRequire(t, expr, message )
#{
      elseIf (consume(TokenType.meta_methodSignature))
        return CmdMetaMethodSignature( t )
}#

      else
        throw peek.error( "Syntax error: unexpected '" + peek + "'." )
      endIf

#{
    method parse_ensure_statement->Cmd
      local t = read  # 'ensure'

      local has_parens = consume( TokenType.symbol_open_paren )
      local cmd_block = CmdBlock( t )

      local first = true
      while (first or consume(TokenType.symbol_double_ampersand))
        first = false

        local expr = parse_expression

        local cmd_ensure : CmdEnsure
        if (next_is(TokenType.symbol_open_paren))
          # The args haven't been parsed yet because they're invalid outside the context
          # of this ensure command.
          local args = CmdArgs()
          local named_args = parse_args( args )
          cmd_ensure = CmdEnsure( t, expr, args, named_args )

        else
          local access = expr as CmdAccess
          if (access)
            local args = access.args
            if (not args) args = CmdArgs()
            local named_args = access.named_args
            access.args = null
            access.named_args = null
            cmd_ensure = CmdEnsure( t, access, args, named_args )
          else
            cmd_ensure = CmdEnsure( t, expr, CmdArgs() )
          endIf
        endIf

        cmd_block.statements.add( cmd_ensure )

        #local temp_var = this_method.add_local( t, Program.create_unique_id )
        #cur_statement_list.add( CmdLocalDeclaration(t,temp_var,&skip_initialization) )
        #temp_var.initial_value = cmd_ensure.operand.cloned
        #cmd_ensure.local_info = temp_var

      endWhile

      if (has_parens) must_consume( TokenType.symbol_close_paren )

      if (cmd_block.statements.count == 1) return cmd_block.statements.first
      else                                 return cmd_block

    method parse_ensure_expression->Cmd
      local t = read  # 'ensure'

      local has_parens = consume( TokenType.symbol_open_paren )

      local expr = parse_expression

      local cmd_ensure : CmdEnsure
      if (next_is(TokenType.symbol_open_paren))
        # The args haven't been parsed yet because they're invalid outside the context
        # of this ensure command.
        local args = CmdArgs()
        local named_args = parse_args( args )
        cmd_ensure = CmdEnsure( t, expr, args, named_args )

      else
        local access = expr as CmdAccess
        if (access)
          local args = access.args
          if (not args) args = CmdArgs()
          local named_args = access.named_args
          access.args = null
          access.named_args = null
          cmd_ensure = CmdEnsure( t, access, args, named_args )
        else
          cmd_ensure = CmdEnsure( t, expr, CmdArgs() )
        endIf
      endIf

      if (has_parens) must_consume( TokenType.symbol_close_paren )

      # The actual 'ensure' operation goes before the current statement.  This
      # current expression resolves to just the variable being ensured.
      cur_statement_list.add( cmd_ensure )

      return cmd_ensure.operand.cloned

    method parse_function( t:Token )->Cmd
      local parameters : FnParam[]
      local return_type : Type
      local is_generic = false
      if (consume(TokenType.symbol_open_paren))
        if (not consume(TokenType.symbol_close_paren))
          parameters = FnParam[]
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            local param = FnParam( read_identifier )
            local t2 = peek
            local cur_generic = false
            if (consume(TokenType.symbol_colon)) param.type = parse_type
            else                                 cur_generic = true

            if (parameters.count and (is_generic != cur_generic))
              throw t2.error( "function parameters must all be typed or all be generic." )
            endIf

            is_generic = cur_generic
            parameters.add( param )
          endWhile
          must_consume( TokenType.symbol_close_paren )
        endIf
      endIf

      local parsed_arrow = false
      local t2 = peek
      if (consume(TokenType.symbol_arrow))
        if (is_generic) throw t2.error( "A function with generic parameters must use '=>' to define its body." )
        parsed_arrow = true
        consume_eols
        if (not consume(TokenType.symbol_open_paren))
          throw peek.error( "A Function return type must be enclosed in (parens)." )
        endIf
        consume_eols
        return_type = parse_type
        consume_eols
        must_consume( TokenType.symbol_close_paren )
      endIf

      local with_args : FnArg[]
      if (consume(TokenType.keyword_with))
        must_consume( TokenType.symbol_open_paren )
        if (not consume(TokenType.symbol_close_paren))
          with_args = FnArg[]
          local first = true
          while (first or consume(TokenType.symbol_comma))
            first = false
            t2 = peek
            local name  = read_identifier
            local value : Cmd
            if (consume(TokenType.symbol_equals))
              value = parse_expression
            else
              # Function definition
              value = CmdAccess( t2, name )
            endIf
            local arg = FnArg( name, value )
            if (consume(TokenType.symbol_colon)) arg.type = parse_type
            with_args.add( arg )
          endWhile
          must_consume(TokenType.symbol_close_paren)
        endIf
      endIf

      consume( TokenType.symbol_colon )  # totally optional

      if (not parsed_arrow)
        t2 = peek
        if (consume(TokenType.symbol_fat_arrow))
          if (parameters and parameters.count and not is_generic)
            # Note: if there are no parameters then 'is_generic' is not valid and we can accept
            # the generic arrow
            throw t2.error( "A function with typed parameters must use '->' to define its return type (if desired) and cannot use the generic function definition symbol '=>'." )
          endIf

          is_generic = true
        endIf
      endIf

      local statements : CmdStatementList
      local tokens : Token[]
      if (not is_generic and consume_eols)
        ensure tokens
        local depth = 1
        while (reader.has_another)
          t2 = reader.read
          if (t2.type is TokenType.keyword_endFunction)
            --depth
            if (depth == 0) escapeWhile
            tokens.add( t2 )
          elseIf (t2.type is TokenType.keyword_function)
            ++depth
            tokens.add( t2 )
          else
            tokens.add( t2 )
          endIf
        endWhile
        if (depth) throw t.error( "End of file looking for 'endFunction'." )
      else
        ensure statements
        parse_single_line_statements( statements )
      endIf

      return CmdCreateFunction( t, parameters, return_type, with_args, statements, tokens, is_generic )
}#

    method parse_value_table( t:Token )->Cmd
      # '{' already consumed
      local table = CmdTypedLiteralTable( t, "ValueTable" )
      consume_eols
      if (consume(TokenType.symbol_close_brace)) return table

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols

        local key : Cmd
        if (next_is_identifier)
          t = peek
          key = CmdLiteralString( t, read_identifier )
        else
          key = parse_expression
        endIf
        consume_eols

        local value : Cmd
        if (consume(TokenType.symbol_colon))
          consume_eols
          t = peek
          if (consume(TokenType.symbol_open_brace))
            value = parse_value_table( t )
          elseIf (consume(TokenType.symbol_open_bracket))
            value = parse_value_list( t )
          else
            value = parse_expression
          endIf
        else
          value = CmdLiteralLogical( t, true )
        endIf

        table.add( key, value )

        consume_eols
      endWhile

      must_consume( TokenType.symbol_close_brace )
      return table

    method parse_value_list( t:Token )->Cmd
      # '[' already consumed
      consume_eols
      if (consume(TokenType.symbol_close_bracket)) return CmdAccess( t, "ValueList", CmdArgs() )

      local elements = CmdArgs()

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols

        local value : Cmd
        t = peek
        if (consume(TokenType.symbol_open_brace))
          value = parse_value_table( t )
        elseIf (consume(TokenType.symbol_open_bracket))
          value = parse_value_list( t )
        else
          value = parse_expression
        endIf

        elements.add( value )

        consume_eols
      endWhile

      must_consume( TokenType.symbol_close_bracket )
      return CmdTypedLiteralList( t, "ValueList", elements )

    method parse_typed_literal_list( t:Token, list_type_name:String )->Cmd
      must_consume( TokenType.symbol_open_bracket )
      consume_eols

      local elements = CmdArgs()

      local first = true
      while (first or consume(TokenType.symbol_comma))
        first = false
        consume_eols
        t = peek
        if (next_is(TokenType.symbol_open_bracket))
          # Nested list - propagate the type
          if (list_type_name.ends_with("[][]"))
            local item = parse_typed_literal_list( t, list_type_name.leftmost(-2) )
            elements.add( item )
          else
            throw t.error( "Literal list content contains more dimensions than literal list type." )
          endIf
        else
          elements.add( parse_expression )
        endIf
        consume_eols
      endWhile
      must_consume( TokenType.symbol_close_bracket )

      return CmdTypedLiteralList( t, list_type_name, elements )

endClass

#{
class FnParam( name:String )
  PROPERTIES
    type : Type
endClass

class FnArg( name:String, value:Cmd )
  PROPERTIES
    type : Type

  METHODS
    method set_type( @type )->FnArg
      return this
endClass
}#
