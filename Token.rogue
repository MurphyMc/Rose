class Token
  GLOBAL PROPERTIES
    filepath_to_filename = Table<<String,String>>()

  PROPERTIES
    type     : TokenType
    filepath : String
    line     : Int32
    column   : Int32

  METHODS
    method init( type )

    method cloned->Token
      throw RogueError( "cloned() not implemented for type $." (type_name) )

    method error( message:String )->RogueError
      return RogueError( message, filepath, line, column )

    method filename->String
      if (not filepath) return "(unknown)"
      local f = filepath_to_filename[ filepath ]
      if (f) return f

      f = File.filename( filepath )
      filepath_to_filename[ filepath ] = f
      return f

    method is_directive->Logical
      return type.is_directive

    method is_structure->Logical
      return type.is_structure

    method quoted_name->String
      return "'$'" (this->String)

    method set_location( filepath, line, column )->Token
      return this

    method set_location( existing:Token )->Token
      filepath = existing.filepath
      line     = existing.line
      column   = existing.column
      return this

    method to->Character
      return 0

    method to->Int32
      return 0

    method to->Int64
      return this->Int32

    method to->Real64
      return 0

    method to->String
      return type.to_String(this)

    method to->Type
      return null

    method to_location->String
      if (not line and not column) return filepath
      local buffer = StringBuilder().print( filepath ).print( " line " ).print( line )
      if (column) buffer.print( ", column " ).print( column )
      return buffer->String
endClass

class EOLToken : Token
  PROPERTIES
    comment : String

  METHODS
    method init( type, comment )

    method init( existing:Token )
      type = TokenType.eol
      set_location( existing )

    method to->String
      if (comment and comment.count) return "EOL  # $" (comment)
      return "EOL"
endClass

#{
class IdentifierToken : Token
  PROPERTIES
    value : String

  METHODS
    method init( type, value )

    method to->String
      return ""+value
endClass
}#

class TypeIdentifierToken : Token
  PROPERTIES
    nominal_type : Type
    target_type   : Type

  METHODS
    method init( type, nominal_type, target_type )

    method to->String
      return nominal_type.name

    method to->Type
      return nominal_type
endClass

class LiteralCharacterToken : Token
  PROPERTIES
    value : Character

  METHODS
    method init( type, value )

    method to->Character
      return value

    method to->String
      return ""+value
endClass

class LiteralInt64Token : Token
  PROPERTIES
    value : Int64

  METHODS
    method init( type, value )

    method to->Int32
      return value->Int32

    method to->Int64
      return value

    method to->Real64
      return value->Real64

    method to->String
      return ""+value
endClass

class LiteralInt32Token : Token
  PROPERTIES
    value : Int32

  METHODS
    method init( type, value )

    method to->Int32
      return value

    method to->Real64
      return value->Real64

    method to->String
      return ""+value
endClass

class LiteralReal64Token : Token
  PROPERTIES
    value : Real64

  METHODS
    method init( type, value )

    method to->Int32
      return value->Int32

    method to->Real64
      return value

    method to->String
      return ""+value
endClass

class NativeCodeToken : Token
  PROPERTIES
    value : String

  METHODS
    method init( type, value )

    method quoted_name->String
      if (type is TokenType.keyword_nativeHeader) return "nativeHeader"
      return "nativeCode"

    method to->String
      return value
endClass

class StringDataToken : Token
  PROPERTIES
    value : String

  METHODS
    method init( type, value )

    method quoted_name->String
      if (type is TokenType.directive_essential) return "$essential"
      return prior.quoted_name

    method to->String
      return value
endClass

